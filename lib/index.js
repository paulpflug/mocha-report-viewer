// Generated by CoffeeScript 1.12.7
(function() {
  "use strict";
  var debug, http, path, socketio, spawn, url;

  http = require("http");

  url = require("url");

  path = require("path");

  debug = require("debug");

  debug = debug("report-viewer");

  spawn = require("child_process");

  spawn = spawn.spawn;

  socketio = require("socket.io");

  module.exports = function(program) {
    var addOptionsToClient, child, close, currentConsole, dataManager, ended, io, loaded, port, restart, server, site;
    currentConsole = [];
    port = program.port || 9999;
    if (program.viewer == null) {
      program.viewer = require("report-viewer-default");
    }
    if (!program.viewer.files) {
      throw new Error("no files to serve");
    }
    site = program.viewer;
    addOptionsToClient = function() {
      return site.files["options.js"] = "(function(){window.options={port:" + port + "};}())";
    };
    addOptionsToClient();
    server = http.createServer(function(request, response) {
      var extension, filename;
      filename = url.parse(request.url).pathname.slice(1) || "index.html";
      if (site.files[filename]) {
        debug("http server sending " + filename);
        extension = path.extname(filename).slice(1);
        if (extension === "js") {
          extension = "javascript";
        }
        response.writeHead(200, {
          "Content-type": "text/" + extension
        });
        response.write(site.files[filename], "utf8");
      } else {
        response.writeHead(404, {
          "Content-type": "text/plain"
        });
        response.write("404", "utf8");
      }
      return response.end();
    });
    loaded = false;
    io = socketio(server);
    io.on("connection", function(socket) {
      var context, project, spec;
      debug(socket.id + " socket connected");
      socket.on("getConsole", function() {
        debug(socket.id + " sending console cache");
        return socket.emit("getConsole", currentConsole);
      });
      socket.on("setConsole", function(newConsole) {
        debug(socket.id + " test ended. Updated console cache");
        return currentConsole = newConsole;
      });
      socket.on("loaded", function() {
        debug(socket.id + " Website loaded successfully");
        loaded = true;
        if (ended) {
          return close();
        }
      });
      socket.on("restartable", function() {
        debug(socket.id + " sending restartable: " + program.args.length > 0);
        return socket.emit("restartable", program.args.length > 0);
      });
      if (program.args.length > 0) {
        debug(socket.id + " client requests restart of child process");
        if (restart) {
          spec = socket.request._query["spec"];
          project = socket.request._query["project"];
          context = socket.request._query["context"];
          restart(spec, project, context);
          return socket.on("restart", function() {
            return restart(spec, project, context);
          });
        }
      }
    });
    ended = false;
    child = null;
    dataManager = function(chunk) {
      var cLine, i, len, line, lines, results;
      if (chunk !== null) {
        lines = chunk.split("\n");
        if (lines[lines.length - 1] === "") {
          lines.pop();
        }
        results = [];
        for (i = 0, len = lines.length; i < len; i++) {
          line = lines[i];
          cLine = {};
          cLine.id = currentConsole.length;
          cLine.text = line;
          cLine.type = "normal";
          io.emit("consoleLine", cLine);
          results.push(currentConsole.push(cLine));
        }
        return results;
      }
    };
    if (program.args.length === 0) {
      process.stdin.on('end', function(chunk) {
        debug("input closed");
        ended = true;
        if (loaded) {
          return close();
        }
      });
      process.stdin.setEncoding("utf8");
      process.stdin.on("data", dataManager);
    } else {
      restart = function(spec, project, context) {
        var args, child_env, cwd, sh;
        currentConsole = [];
        io.emit("restart");
        if (child) {
          child.kill();
        }
        sh = "sh";
        args = ["-c"];
        if (process.platform === "win32") {
          sh = "cmd";
          args[0] = "/c";
        }
        args = args.concat(program.args);
        if (spec) {
          args[1] = args[1] + " " + spec;
        }
        cwd = process.cwd();
        if (project) {
          cwd = project;
        }
        child_env = JSON.stringify(process.env);
        child_env = JSON.parse(child_env);
        if (context) {
          child_env.mochacontext = context;
        }
        child = spawn(sh, args, {
          cwd: cwd,
          env: child_env
        });
        child.stdout.setEncoding("utf8");
        child.stdout.on("data", dataManager);
        child.stderr.setEncoding("utf8");
        return child.stderr.on("data", dataManager);
      };
    }
    console.log("serving on port " + port);
    server.listen(port);
    if (program.opener) {

    } else {
      debug("issue reload to clients");
      io.sockets.emit("reload");
    }
    if (site.action) {
      site.action.on("reload", function() {
        addOptionsToClient();
        debug(" View changed - reloading");
        return io.sockets.emit("reload");
      });
    }
    return close = function() {
      debug("exit process");
      if (child) {
        child.kill();
      }
      server.close();
      return process.exit();
    };
  };

}).call(this);
